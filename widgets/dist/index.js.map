{
  "version": 3,
  "sources": ["../src/index.ts", "../src/renderer.ts", "../src/styles.css", "../src/generated.ts"],
  "sourcesContent": ["/**\n * Jupyter notebook widgets for visualizing t-prompts structures.\n * Phase 0 & 1: Asset de-duplication and minimal static renderer\n */\n\nimport { initWidget } from './renderer';\nimport widgetStyles from './styles.css';\nimport { STYLES_HASH } from './generated';\n\n// Export version matching Python package\nexport const VERSION = '0.9.0-alpha';\n\n// Store widget runtime on window for singleton pattern (Phase 0)\ndeclare global {\n  interface Window {\n    __TPWidget?: {\n      version: string;\n      initWidget: typeof initWidget;\n      stylesInjected: boolean;\n    };\n  }\n}\n\n/**\n * Inject widget styles into the document (once per page)\n */\nfunction injectStyles(): void {\n  // Use hash-based style ID for cache busting\n  const styleId = `tp-widget-styles-${STYLES_HASH}`;\n\n  // Check if this version is already injected\n  // Use querySelector instead of getElementById for reliability across environments\n  if (document.querySelector(`#${styleId}`)) {\n    return;\n  }\n\n  // Remove any old versions of the styles\n  const oldStyles = document.querySelectorAll('[id^=\"tp-widget-styles\"]');\n  oldStyles.forEach(el => el.remove());\n\n  // Inject new styles\n  const styleElement = document.createElement('style');\n  styleElement.id = styleId;\n  styleElement.textContent = widgetStyles;\n  document.head.appendChild(styleElement);\n\n  if (window.__TPWidget) {\n    window.__TPWidget.stylesInjected = true;\n  }\n}\n\n/**\n * Initialize the widget runtime on window (Phase 0 singleton)\n */\nfunction initRuntime(): void {\n  if (!window.__TPWidget) {\n    window.__TPWidget = {\n      version: VERSION,\n      initWidget,\n      stylesInjected: false,\n    };\n  }\n}\n\n/**\n * Auto-initialize all widgets on the page\n */\nfunction autoInit(): void {\n  initRuntime();\n  injectStyles();\n\n  // Find all widget containers and initialize them\n  const containers = document.querySelectorAll('[data-tp-widget]');\n  containers.forEach((container) => {\n    if (container instanceof HTMLElement && !container.dataset.tpInitialized) {\n      initWidget(container);\n      container.dataset.tpInitialized = 'true';\n    }\n  });\n}\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else {\n  autoInit();\n}\n\n// Watch for new widgets being added to the page (for Jupyter dynamic cell rendering)\nif (typeof MutationObserver !== 'undefined') {\n  const observer = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      mutation.addedNodes.forEach((node) => {\n        if (node instanceof HTMLElement) {\n          // Check if this node is a widget container\n          if (node.matches('[data-tp-widget]') && !node.dataset.tpInitialized) {\n            initRuntime();\n            injectStyles();\n            initWidget(node);\n            node.dataset.tpInitialized = 'true';\n          }\n          // Check if this node contains widget containers\n          const widgets = node.querySelectorAll('[data-tp-widget]');\n          widgets.forEach((widget) => {\n            if (widget instanceof HTMLElement && !widget.dataset.tpInitialized) {\n              initRuntime();\n              injectStyles();\n              initWidget(widget);\n              widget.dataset.tpInitialized = 'true';\n            }\n          });\n        }\n      });\n    });\n  });\n\n  // Observe the entire document body for new widgets\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n  });\n}\n\n// Export for manual initialization\nexport { initWidget, injectStyles, initRuntime };\n", "/**\n * Widget renderer for structured prompts\n */\n\n// Type definitions for widget data structures\ninterface WidgetData {\n  compiled_ir?: CompiledIRData;\n  ir?: IRData;\n  source_prompt?: PromptData;\n}\n\ninterface CompiledIRData {\n  ir_id: string;\n  subtree_map: Record<string, string[]>;\n  num_elements: number;\n}\n\ninterface IRData {\n  chunks: ChunkData[];\n  source_prompt_id: string | null;\n  id: string;\n  metadata: Record<string, unknown>;\n}\n\ninterface PromptData {\n  prompt_id: string;\n  children: ElementData[];\n}\n\ninterface ElementData {\n  type: string;\n  key: string | number;\n  id: string;\n  children?: ElementData[];\n  [key: string]: unknown;\n}\n\ninterface ChunkData {\n  type: string;\n  text?: string;\n  image?: ImageData;\n  element_id: string;\n  id: string;\n  metadata: Record<string, unknown>;\n}\n\ninterface ImageData {\n  base64_data: string;\n  format: string;\n  width: number;\n  height: number;\n}\n\ninterface TextMapping {\n  fullText: string;\n  offsetToChunkId: string[];\n  chunkIdToOffsets: Record<string, { start: number; end: number }>;\n}\n\ninterface RenderResult {\n  container: HTMLDivElement;\n  textMapping: TextMapping;\n}\n\n/**\n * ID Conversion Utilities\n *\n * Convention: Python UUIDs are prefixed with \"id-\" when used as DOM element IDs.\n * This ensures IDs always start with a letter (HTML spec compliant) and avoids\n * CSS selector issues with IDs starting with digits.\n */\n\n/**\n * Convert a Python UUID to a DOM element ID by prefixing with \"id-\"\n */\nexport function toElementId(pythonId: string): string {\n  return `id-${pythonId}`;\n}\n\n/**\n * Convert a DOM element ID back to Python UUID by removing the \"id-\" prefix\n */\nexport function fromElementId(elementId: string): string {\n  if (elementId.startsWith('id-')) {\n    return elementId.substring(3);\n  }\n  return elementId;\n}\n\n/**\n * Build a map from element_id to element_type by walking the source prompt tree\n */\nfunction buildElementTypeMap(promptData: PromptData | null): Record<string, string> {\n  const map: Record<string, string> = {};\n\n  if (!promptData) {\n    return map;\n  }\n\n  function walkElements(elements: ElementData[]) {\n    for (const element of elements) {\n      map[element.id] = element.type;\n\n      // Recursively process nested elements\n      if (element.children) {\n        walkElements(element.children);\n      }\n    }\n  }\n\n  // Start walking from the root prompt's children\n  walkElements(promptData.children);\n  return map;\n}\n\n/**\n * Render chunks to DOM elements with text mapping\n */\nfunction renderChunksToDOM(\n  chunks: ChunkData[],\n  elementTypeMap: Record<string, string>\n): RenderResult {\n  // Create container\n  const container = document.createElement('div');\n  container.className = 'tp-output-container wrap';\n\n  // Initialize text mapping\n  let fullText = '';\n  const offsetToChunkId: string[] = [];\n  const chunkIdToOffsets: Record<string, { start: number; end: number }> = {};\n\n  // Process each chunk\n  for (const chunk of chunks) {\n    const span = document.createElement('span');\n    span.id = toElementId(chunk.id);\n\n    let chunkText = '';\n\n    if (chunk.type === 'TextChunk' && chunk.text !== undefined) {\n      // Text chunk - use actual text\n      chunkText = chunk.text;\n      span.textContent = chunkText;\n\n      // Determine element type and apply class\n      const elementType = elementTypeMap[chunk.element_id] || 'unknown';\n      span.className = `tp-chunk-${elementType}`;\n    } else if (chunk.type === 'ImageChunk' && chunk.image) {\n      // Image chunk - use markdown-style placeholder with data URL\n      const imgData = chunk.image;\n      const format = imgData.format || 'PNG';\n      const dataUrl = `data:image/${format.toLowerCase()};base64,${imgData.base64_data}`;\n      chunkText = `![${format} ${imgData.width}x${imgData.height}](${dataUrl})`;\n      span.textContent = chunkText;\n      span.className = 'tp-chunk-image';\n\n      // Add title with full info for hover\n      span.title = `Image: ${format} ${imgData.width}x${imgData.height}`;\n    }\n\n    // Record text mapping\n    const startOffset = fullText.length;\n    const endOffset = startOffset + chunkText.length;\n\n    // Add to full text\n    fullText += chunkText;\n\n    // Map each character offset to chunk ID\n    for (let i = startOffset; i < endOffset; i++) {\n      offsetToChunkId.push(chunk.id);\n    }\n\n    // Map chunk ID to offsets\n    chunkIdToOffsets[chunk.id] = { start: startOffset, end: endOffset };\n\n    // Append span to container\n    container.appendChild(span);\n  }\n\n  return {\n    container,\n    textMapping: {\n      fullText,\n      offsetToChunkId,\n      chunkIdToOffsets,\n    },\n  };\n}\n\n/**\n * Mark first and last spans for each element based on compiled IR\n */\nfunction markElementBoundaries(\n  outputContainer: HTMLDivElement,\n  compiledIR: CompiledIRData | null,\n  elementTypeMap: Record<string, string>\n): void {\n  if (!compiledIR || !compiledIR.subtree_map) {\n    return;\n  }\n\n  // Iterate through each element and its chunks\n  for (const [elementId, chunkIds] of Object.entries(compiledIR.subtree_map)) {\n    if (chunkIds.length === 0) {\n      continue;\n    }\n\n    // Get element type for this element\n    const elementType = elementTypeMap[elementId] || 'unknown';\n\n    // Mark first chunk - convert Python UUID to element ID for DOM query\n    const firstChunkId = chunkIds[0];\n    const firstSpan = outputContainer.querySelector(`[id=\"${toElementId(firstChunkId)}\"]`);\n    if (firstSpan) {\n      firstSpan.classList.add(`tp-first-${elementType}`);\n    }\n\n    // Mark last chunk\n    const lastChunkId = chunkIds[chunkIds.length - 1];\n    const lastSpan = outputContainer.querySelector(`[id=\"${toElementId(lastChunkId)}\"]`);\n    if (lastSpan) {\n      lastSpan.classList.add(`tp-last-${elementType}`);\n    }\n  }\n}\n\n/**\n * Initialize a widget in the given container\n */\nexport function initWidget(container: HTMLElement): void {\n  try {\n    // Find the embedded JSON data\n    const scriptTag = container.querySelector('script[data-role=\"tp-widget-data\"]');\n    if (!scriptTag || !scriptTag.textContent) {\n      container.innerHTML = '<div class=\"tp-error\">No widget data found</div>';\n      return;\n    }\n\n    const data: WidgetData = JSON.parse(scriptTag.textContent);\n\n    // Extract chunks from the IR\n    if (!data.ir || !data.ir.chunks) {\n      container.innerHTML = '<div class=\"tp-error\">No chunks found in widget data</div>';\n      return;\n    }\n\n    // Build element type map from source prompt\n    const elementTypeMap = buildElementTypeMap(data.source_prompt || null);\n\n    // Render chunks to DOM with text mapping\n    const { container: outputContainer, textMapping } = renderChunksToDOM(\n      data.ir.chunks,\n      elementTypeMap\n    );\n\n    // Mark element boundaries using compiled IR\n    markElementBoundaries(outputContainer, data.compiled_ir || null, elementTypeMap);\n\n    // Store text mapping on container for future use\n    (outputContainer as any)._textMapping = textMapping;\n\n    // Wrap in widget output container\n    const widgetOutput = document.createElement('div');\n    widgetOutput.className = 'tp-widget-output';\n    widgetOutput.appendChild(outputContainer);\n\n    // Find the widget mount point and render\n    const mountPoint = container.querySelector('.tp-widget-mount');\n    if (mountPoint) {\n      mountPoint.innerHTML = '';\n      mountPoint.appendChild(widgetOutput);\n    } else {\n      container.innerHTML = '';\n      container.appendChild(widgetOutput);\n    }\n  } catch (error) {\n    console.error('Widget initialization error:', error);\n    container.innerHTML = `<div class=\"tp-error\">Failed to initialize widget: ${\n      error instanceof Error ? error.message : String(error)\n    }</div>`;\n  }\n}\n", "/* T-Prompts Widget Styles */\n\n/* =============================================================================\n   CSS VARIABLES FOR THEMING\n   ============================================================================= */\n\n/* Base UI Variables */\n:root {\n  --tp-color-bg: #ffffff;\n  --tp-color-fg: #24292e;\n  --tp-color-border: #e1e4e8;\n  --tp-color-accent: #0366d6;\n  --tp-color-muted: #6a737d;\n  --tp-color-error: #d73a49;\n  --tp-font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif;\n  --tp-font-mono: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;\n  --tp-spacing: 8px;\n\n  /* ==========================================================================\n     TIER 1: PALETTE PRIMITIVES - Hue values for each element type\n     ========================================================================== */\n  --tp-hue-static: 220;         /* Neutral blue-gray */\n  --tp-hue-interpolation: 212;  /* Blue - dynamic data */\n  --tp-hue-nested: 270;         /* Purple - compositional structure */\n  --tp-hue-list: 160;           /* Teal - collections */\n  --tp-hue-image: 30;           /* Orange - media */\n  --tp-hue-unknown: 0;          /* Red - warning/edge case */\n\n  /* ==========================================================================\n     TIER 2: SEMANTIC TOKENS - Light Mode\n     Saturation, lightness, and alpha values for foregrounds and backgrounds\n     ========================================================================== */\n\n  /* Static text - minimal styling (baseline) */\n  --tp-static-fg-s: 15%;\n  --tp-static-fg-l: 30%;\n  --tp-static-bg-alpha: 0.04;\n\n  /* Interpolations - blue, medium visibility */\n  --tp-interp-fg-s: 80%;\n  --tp-interp-fg-l: 35%;\n  --tp-interp-bg-alpha: 0.10;\n\n  /* Nested prompts - purple, slightly stronger */\n  --tp-nested-fg-s: 75%;\n  --tp-nested-fg-l: 38%;\n  --tp-nested-bg-alpha: 0.12;\n\n  /* Lists - teal, medium tint (increased visibility) */\n  --tp-list-fg-s: 80%;\n  --tp-list-fg-l: 32%;\n  --tp-list-bg-alpha: 0.14;\n\n  /* Images - orange, distinct */\n  --tp-image-fg-s: 85%;\n  --tp-image-fg-l: 40%;\n  --tp-image-bg-alpha: 0.10;\n\n  /* Unknown - red, warning signal */\n  --tp-unknown-fg-s: 80%;\n  --tp-unknown-fg-l: 45%;\n  --tp-unknown-bg-alpha: 0.12;\n}\n\n/* Dark Mode Overrides */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --tp-color-bg: #0d1117;\n    --tp-color-fg: #c9d1d9;\n    --tp-color-border: #30363d;\n    --tp-color-accent: #58a6ff;\n    --tp-color-muted: #8b949e;\n    --tp-color-error: #f85149;\n\n    /* ==========================================================================\n       TIER 2: SEMANTIC TOKENS - Dark Mode Overrides\n       Higher lightness for foregrounds, higher alpha for backgrounds\n       ========================================================================== */\n\n    /* Static text */\n    --tp-static-fg-l: 75%;\n    --tp-static-bg-alpha: 0.08;\n\n    /* Interpolations */\n    --tp-interp-fg-l: 75%;\n    --tp-interp-bg-alpha: 0.18;\n\n    /* Nested prompts */\n    --tp-nested-fg-l: 78%;\n    --tp-nested-bg-alpha: 0.22;\n\n    /* Lists */\n    --tp-list-fg-l: 72%;\n    --tp-list-bg-alpha: 0.24;\n\n    /* Images */\n    --tp-image-fg-l: 80%;\n    --tp-image-bg-alpha: 0.18;\n\n    /* Unknown */\n    --tp-unknown-fg-l: 75%;\n    --tp-unknown-bg-alpha: 0.22;\n  }\n}\n\n/* Main widget container - three-pane grid layout */\n.tp-widget-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: var(--tp-spacing);\n  font-family: var(--tp-font-family);\n  font-size: 14px;\n  color: var(--tp-color-fg);\n  background: var(--tp-color-bg);\n  border: 1px solid var(--tp-color-border);\n  border-radius: 6px;\n  padding: var(--tp-spacing);\n  margin: calc(var(--tp-spacing) * 2) 0;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n/* Individual pane base styles */\n.tp-pane {\n  border: 1px solid var(--tp-color-border);\n  border-radius: 4px;\n  padding: var(--tp-spacing);\n  overflow: auto;\n  max-height: 600px;\n  background: var(--tp-color-bg);\n}\n\n.tp-pane h4 {\n  margin: 0 0 var(--tp-spacing) 0;\n  font-size: 13px;\n  font-weight: 600;\n  color: var(--tp-color-muted);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n/* Pane content containers */\n.tp-tree {\n  font-family: var(--tp-font-mono);\n  font-size: 12px;\n  color: var(--tp-color-fg);\n}\n\n.tp-code {\n  font-family: var(--tp-font-mono);\n  font-size: 12px;\n  line-height: 1.6;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  color: var(--tp-color-fg);\n}\n\n.tp-preview {\n  font-family: var(--tp-font-family);\n  font-size: 14px;\n  line-height: 1.6;\n  color: var(--tp-color-fg);\n}\n\n/* Output container for chunks */\n.tp-output-container {\n  font-family: var(--tp-font-mono);\n  font-size: 12px;\n  line-height: 1.6;\n  color: var(--tp-color-fg);\n  max-width: 100ch;\n  word-break: break-all;\n}\n\n/* Wrapping mode (default) */\n.tp-output-container.wrap {\n  white-space: pre-wrap;\n}\n\n/* Scrolling mode (horizontal scroll, no wrapping) */\n.tp-output-container.scroll {\n  white-space: pre;\n  overflow-x: auto;\n}\n\n/* =============================================================================\n   TIER 3: APPLIED STYLES - Chunk Element Types\n   Semantic colors applied using the three-tier variable system\n   ============================================================================= */\n\n/* Static text - neutral baseline */\n.tp-chunk-static {\n  white-space: pre-wrap;\n  color: hsl(\n    var(--tp-hue-static),\n    var(--tp-static-fg-s),\n    var(--tp-static-fg-l)\n  );\n  background: hsla(\n    var(--tp-hue-static),\n    20%,\n    60%,\n    var(--tp-static-bg-alpha)\n  );\n}\n\n/* Interpolations - blue for dynamic data */\n.tp-chunk-interpolation {\n  white-space: pre-wrap;\n  color: hsl(\n    var(--tp-hue-interpolation),\n    var(--tp-interp-fg-s),\n    var(--tp-interp-fg-l)\n  );\n  background: hsla(\n    var(--tp-hue-interpolation),\n    80%,\n    60%,\n    var(--tp-interp-bg-alpha)\n  );\n}\n\n/* Nested prompts - purple for composition */\n.tp-chunk-nested_prompt {\n  white-space: pre-wrap;\n  color: hsl(\n    var(--tp-hue-nested),\n    var(--tp-nested-fg-s),\n    var(--tp-nested-fg-l)\n  );\n  background: hsla(\n    var(--tp-hue-nested),\n    75%,\n    65%,\n    var(--tp-nested-bg-alpha)\n  );\n}\n\n/* Lists - teal for collections */\n.tp-chunk-list {\n  white-space: pre-wrap;\n  color: hsl(\n    var(--tp-hue-list),\n    var(--tp-list-fg-s),\n    var(--tp-list-fg-l)\n  );\n  background: hsla(\n    var(--tp-hue-list),\n    70%,\n    60%,\n    var(--tp-list-bg-alpha)\n  );\n}\n\n/* Images - orange for media, with text elision */\n.tp-chunk-image {\n  white-space: nowrap;\n  max-width: 200px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: inline-block;\n  vertical-align: middle;\n  color: hsl(\n    var(--tp-hue-image),\n    var(--tp-image-fg-s),\n    var(--tp-image-fg-l)\n  );\n  background: hsla(\n    var(--tp-hue-image),\n    85%,\n    65%,\n    var(--tp-image-bg-alpha)\n  );\n}\n\n/* Unknown types - red warning */\n.tp-chunk-unknown {\n  white-space: pre-wrap;\n  color: hsl(\n    var(--tp-hue-unknown),\n    var(--tp-unknown-fg-s),\n    var(--tp-unknown-fg-l)\n  );\n  background: hsla(\n    var(--tp-hue-unknown),\n    80%,\n    60%,\n    var(--tp-unknown-bg-alpha)\n  );\n}\n\n/* Element boundary markers - type-specific borders */\n/* Borders use each element type's semantic hue for visual consistency */\n\n/* No borders for static elements (baseline) */\n.tp-first-static,\n.tp-last-static {\n  /* Static elements have no boundary borders */\n}\n\n/* 2px borders for interpolation (blue, hue 212) */\n.tp-first-interpolation {\n  border-left: 2px solid hsl(212, 90%, 45%);\n  padding-left: 2px;\n  box-decoration-break: slice;\n  -webkit-box-decoration-break: slice;\n}\n\n.tp-last-interpolation {\n  border-right: 2px solid hsl(212, 90%, 55%);\n  padding-right: 2px;\n  box-decoration-break: slice;\n  -webkit-box-decoration-break: slice;\n}\n\n/* 2px borders for image (orange, hue 30) */\n.tp-first-image {\n  border-left: 2px solid hsl(30, 90%, 50%);\n  padding-left: 2px;\n  box-decoration-break: slice;\n  -webkit-box-decoration-break: slice;\n}\n\n.tp-last-image {\n  border-right: 2px solid hsl(30, 90%, 60%);\n  padding-right: 2px;\n  box-decoration-break: slice;\n  -webkit-box-decoration-break: slice;\n}\n\n/* 3px borders for list (teal, hue 160) - higher priority, placed last */\n.tp-first-list {\n  border-left: 3px solid hsl(160, 80%, 40%);\n  padding-left: 2px;\n  box-decoration-break: slice;\n  -webkit-box-decoration-break: slice;\n}\n\n.tp-last-list {\n  border-right: 3px solid hsl(160, 80%, 50%);\n  padding-right: 2px;\n  box-decoration-break: slice;\n  -webkit-box-decoration-break: slice;\n}\n\n/* 3px borders for nested_prompt (purple, hue 270) - higher priority, placed last */\n.tp-first-nested_prompt {\n  border-left: 3px solid hsl(270, 85%, 50%);\n  padding-left: 2px;\n  box-decoration-break: slice;\n  -webkit-box-decoration-break: slice;\n}\n\n.tp-last-nested_prompt {\n  border-right: 3px solid hsl(270, 85%, 60%);\n  padding-right: 2px;\n  box-decoration-break: slice;\n  -webkit-box-decoration-break: slice;\n}\n\n/* Dark mode adjustments for boundaries - lighter colors for better visibility */\n@media (prefers-color-scheme: dark) {\n  .tp-first-interpolation {\n    border-left-color: hsl(212, 90%, 60%);\n  }\n\n  .tp-last-interpolation {\n    border-right-color: hsl(212, 90%, 70%);\n  }\n\n  .tp-first-image {\n    border-left-color: hsl(30, 90%, 65%);\n  }\n\n  .tp-last-image {\n    border-right-color: hsl(30, 90%, 75%);\n  }\n\n  .tp-first-list {\n    border-left-color: hsl(160, 80%, 55%);\n  }\n\n  .tp-last-list {\n    border-right-color: hsl(160, 80%, 65%);\n  }\n\n  .tp-first-nested_prompt {\n    border-left-color: hsl(270, 85%, 65%);\n  }\n\n  .tp-last-nested_prompt {\n    border-right-color: hsl(270, 85%, 75%);\n  }\n}\n\n/* Error display */\n.tp-error {\n  color: var(--tp-color-error);\n  font-family: var(--tp-font-mono);\n  font-size: 12px;\n  padding: var(--tp-spacing);\n  background: rgba(248, 81, 73, 0.1);\n  border: 1px solid var(--tp-color-error);\n  border-radius: 4px;\n  margin: var(--tp-spacing) 0;\n}\n\n/* Responsive layout */\n@media (max-width: 1200px) {\n  .tp-widget-container {\n    grid-template-columns: 1fr;\n  }\n\n  .tp-pane {\n    max-height: 400px;\n  }\n}\n\n@media (min-width: 1201px) and (max-width: 1600px) {\n  .tp-widget-container {\n    grid-template-columns: 1fr 1fr;\n  }\n}\n", "// Auto-generated by build.js - do not edit manually\nexport const STYLES_HASH = 'c1d9a4e3';\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "VERSION", "initRuntime", "initWidget", "injectStyles", "toElementId", "pythonId", "buildElementTypeMap", "promptData", "map", "walkElements", "elements", "element", "renderChunksToDOM", "chunks", "elementTypeMap", "container", "fullText", "offsetToChunkId", "chunkIdToOffsets", "chunk", "span", "toElementId", "chunkText", "elementType", "imgData", "format", "dataUrl", "startOffset", "endOffset", "i", "markElementBoundaries", "outputContainer", "compiledIR", "elementId", "chunkIds", "firstChunkId", "firstSpan", "lastChunkId", "lastSpan", "initWidget", "scriptTag", "data", "textMapping", "widgetOutput", "mountPoint", "error", "styles_default", "STYLES_HASH", "VERSION", "injectStyles", "styleId", "STYLES_HASH", "el", "styleElement", "styles_default", "initRuntime", "initWidget", "autoInit", "container", "mutations", "mutation", "node", "widget"]
}
