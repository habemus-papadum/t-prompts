{
  "version": 3,
  "sources": ["../src/index.ts", "../src/renderer.ts", "../src/styles.css"],
  "sourcesContent": ["/**\n * Jupyter notebook widgets for visualizing t-prompts structures.\n * Phase 0 & 1: Asset de-duplication and minimal static renderer\n */\n\nimport { initWidget } from './renderer';\nimport widgetStyles from './styles.css';\n\n// Export version matching Python package\nexport const VERSION = '0.9.0-alpha';\n\n// Store widget runtime on window for singleton pattern (Phase 0)\ndeclare global {\n  interface Window {\n    __TPWidget?: {\n      version: string;\n      initWidget: typeof initWidget;\n      stylesInjected: boolean;\n    };\n  }\n}\n\n/**\n * Inject widget styles into the document (once per page)\n */\nfunction injectStyles(): void {\n  if (window.__TPWidget?.stylesInjected) {\n    return;\n  }\n\n  const styleId = 'tp-widget-styles';\n  if (document.getElementById(styleId)) {\n    return;\n  }\n\n  const styleElement = document.createElement('style');\n  styleElement.id = styleId;\n  styleElement.textContent = widgetStyles;\n  document.head.appendChild(styleElement);\n\n  if (window.__TPWidget) {\n    window.__TPWidget.stylesInjected = true;\n  }\n}\n\n/**\n * Initialize the widget runtime on window (Phase 0 singleton)\n */\nfunction initRuntime(): void {\n  if (!window.__TPWidget) {\n    window.__TPWidget = {\n      version: VERSION,\n      initWidget,\n      stylesInjected: false,\n    };\n  }\n}\n\n/**\n * Auto-initialize all widgets on the page\n */\nfunction autoInit(): void {\n  initRuntime();\n  injectStyles();\n\n  // Find all widget containers and initialize them\n  const containers = document.querySelectorAll('[data-tp-widget]');\n  containers.forEach((container) => {\n    if (container instanceof HTMLElement && !container.dataset.tpInitialized) {\n      initWidget(container);\n      container.dataset.tpInitialized = 'true';\n    }\n  });\n}\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else {\n  autoInit();\n}\n\n// Watch for new widgets being added to the page (for Jupyter dynamic cell rendering)\nif (typeof MutationObserver !== 'undefined') {\n  const observer = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      mutation.addedNodes.forEach((node) => {\n        if (node instanceof HTMLElement) {\n          // Check if this node is a widget container\n          if (node.matches('[data-tp-widget]') && !node.dataset.tpInitialized) {\n            initRuntime();\n            injectStyles();\n            initWidget(node);\n            node.dataset.tpInitialized = 'true';\n          }\n          // Check if this node contains widget containers\n          const widgets = node.querySelectorAll('[data-tp-widget]');\n          widgets.forEach((widget) => {\n            if (widget instanceof HTMLElement && !widget.dataset.tpInitialized) {\n              initRuntime();\n              injectStyles();\n              initWidget(widget);\n              widget.dataset.tpInitialized = 'true';\n            }\n          });\n        }\n      });\n    });\n  });\n\n  // Observe the entire document body for new widgets\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n  });\n}\n\n// Export for manual initialization\nexport { initWidget, injectStyles, initRuntime };\n", "/**\n * Widget renderer for structured prompts - Simplified renderer\n */\n\n// Type definitions for widget data structures\ninterface WidgetData {\n  compiled_ir?: CompiledIRData;\n  ir?: IRData;\n  source_prompt?: PromptData;\n}\n\ninterface CompiledIRData {\n  ir_id: string;\n  subtree_map: Record<string, string[]>;\n  num_elements: number;\n}\n\ninterface IRData {\n  chunks: ChunkData[];\n  source_prompt_id: string | null;\n  id: string;\n  metadata: Record<string, unknown>;\n}\n\ninterface PromptData {\n  prompt_id: string;\n  children: ElementData[];\n}\n\ninterface ElementData {\n  type: string;\n  key: string | number;\n  value?: string;\n  [key: string]: unknown;\n}\n\ninterface ChunkData {\n  type: string;\n  text?: string;\n  image?: ImageData;\n  element_id: string;\n  id: string;\n  metadata: Record<string, unknown>;\n}\n\ninterface ImageData {\n  base64_data: string;\n  format: string;\n  width: number;\n  height: number;\n}\n\n/**\n * Render chunks as simple text and images\n */\nfunction renderChunks(chunks: ChunkData[]): string {\n  if (!chunks || chunks.length === 0) {\n    return '<div class=\"tp-empty\">No content</div>';\n  }\n\n  let html = '';\n\n  for (const chunk of chunks) {\n    if (chunk.type === 'TextChunk' && chunk.text !== undefined) {\n      // Text chunks: escape HTML and preserve whitespace\n      const escaped = escapeHtml(chunk.text);\n      html += escaped;\n    } else if (chunk.type === 'ImageChunk' && chunk.image) {\n      // Image chunks: add newlines around image for separation\n      const imgData = chunk.image;\n      if (imgData.base64_data) {\n        const format = (imgData.format || 'png').toLowerCase();\n        const src = `data:image/${format};base64,${imgData.base64_data}`;\n        html += `\\n<img src=\"${src}\" alt=\"Image ${imgData.width}x${imgData.height}\" style=\"max-width: 100%; height: auto; display: block; margin: 8px 0;\" />\\n`;\n      }\n    }\n  }\n\n  return html;\n}\n\nfunction escapeHtml(text: string): string {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n/**\n * Initialize a widget in the given container\n */\nexport function initWidget(container: HTMLElement): void {\n  try {\n    // Find the embedded JSON data\n    const scriptTag = container.querySelector('script[data-role=\"tp-widget-data\"]');\n    if (!scriptTag || !scriptTag.textContent) {\n      container.innerHTML = '<div class=\"tp-error\">No widget data found</div>';\n      return;\n    }\n\n    const data: WidgetData = JSON.parse(scriptTag.textContent);\n\n    // Extract chunks from the IR\n    if (!data.ir || !data.ir.chunks) {\n      container.innerHTML = '<div class=\"tp-error\">No chunks found in widget data</div>';\n      return;\n    }\n\n    // Render the chunks\n    const contentHtml = renderChunks(data.ir.chunks);\n\n    // Create simple output container\n    const widgetHtml = `\n      <div class=\"tp-widget-output\">\n        <pre style=\"white-space: pre-wrap; font-family: monospace; margin: 0; padding: 8px; background: #f5f5f5; border-radius: 4px;\">${contentHtml}</pre>\n      </div>\n    `;\n\n    // Find the widget mount point and render\n    const mountPoint = container.querySelector('.tp-widget-mount');\n    if (mountPoint) {\n      mountPoint.innerHTML = widgetHtml;\n    } else {\n      container.innerHTML = widgetHtml;\n    }\n  } catch (error) {\n    console.error('Widget initialization error:', error);\n    container.innerHTML = `<div class=\"tp-error\">Failed to initialize widget: ${error instanceof Error ? error.message : String(error)}</div>`;\n  }\n}\n", "/* T-Prompts Widget Styles - Phase 1 */\n\n:root {\n  --tp-color-bg: #ffffff;\n  --tp-color-fg: #24292e;\n  --tp-color-border: #e1e4e8;\n  --tp-color-accent: #0366d6;\n  --tp-color-muted: #6a737d;\n  --tp-color-error: #d73a49;\n  --tp-font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Noto Sans', Helvetica, Arial, sans-serif;\n  --tp-font-mono: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;\n  --tp-spacing: 8px;\n}\n\n/* Dark mode support */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --tp-color-bg: #0d1117;\n    --tp-color-fg: #c9d1d9;\n    --tp-color-border: #30363d;\n    --tp-color-accent: #58a6ff;\n    --tp-color-muted: #8b949e;\n    --tp-color-error: #f85149;\n  }\n}\n\n.tp-widget-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: var(--tp-spacing);\n  font-family: var(--tp-font-family);\n  font-size: 14px;\n  color: var(--tp-color-fg);\n  background: var(--tp-color-bg);\n  border: 1px solid var(--tp-color-border);\n  border-radius: 6px;\n  padding: var(--tp-spacing);\n  margin: calc(var(--tp-spacing) * 2) 0;\n  max-width: 100%;\n  overflow: hidden;\n}\n\n.tp-pane {\n  border: 1px solid var(--tp-color-border);\n  border-radius: 4px;\n  padding: var(--tp-spacing);\n  overflow: auto;\n  max-height: 600px;\n  background: var(--tp-color-bg);\n}\n\n.tp-pane h4 {\n  margin: 0 0 var(--tp-spacing) 0;\n  font-size: 13px;\n  font-weight: 600;\n  color: var(--tp-color-muted);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n/* Tree Pane */\n.tp-tree {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.tp-tree ul {\n  list-style: none;\n  padding-left: calc(var(--tp-spacing) * 2);\n  margin: calc(var(--tp-spacing) / 2) 0;\n}\n\n.tp-tree li {\n  padding: calc(var(--tp-spacing) / 4) 0;\n}\n\n.tp-tree-label {\n  font-family: var(--tp-font-mono);\n  font-size: 12px;\n  color: var(--tp-color-fg);\n}\n\n.tp-tree-prompt > .tp-tree-label {\n  font-weight: 600;\n  color: var(--tp-color-accent);\n}\n\n.tp-tree-interpolation > .tp-tree-label {\n  color: var(--tp-color-accent);\n}\n\n.tp-tree-nested_prompt > .tp-tree-label {\n  color: #6f42c1;\n  font-weight: 500;\n}\n\n.tp-tree-list > .tp-tree-label {\n  color: #d73a49;\n  font-weight: 500;\n}\n\n.tp-tree-static > .tp-tree-label {\n  color: var(--tp-color-muted);\n}\n\n/* Code Pane */\n.tp-code {\n  font-family: var(--tp-font-mono);\n  font-size: 12px;\n  line-height: 1.6;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  color: var(--tp-color-fg);\n  overflow-x: auto;\n}\n\n.tp-code-text {\n  white-space: pre-wrap;\n}\n\n.tp-code-interp {\n  color: var(--tp-color-accent);\n  font-weight: 500;\n  cursor: help;\n}\n\n.tp-code-nested-start,\n.tp-code-nested-end {\n  color: #6f42c1;\n  font-weight: 600;\n}\n\n.tp-code-list-start,\n.tp-code-list-end {\n  color: #d73a49;\n  font-weight: 600;\n}\n\n.tp-code-separator {\n  color: var(--tp-color-muted);\n  font-style: italic;\n}\n\n.tp-code-image {\n  color: #22863a;\n  font-weight: 500;\n  cursor: help;\n}\n\n/* Preview Pane */\n.tp-preview {\n  font-family: var(--tp-font-family);\n  font-size: 14px;\n  line-height: 1.6;\n  color: var(--tp-color-fg);\n}\n\n.tp-preview h1,\n.tp-preview h2,\n.tp-preview h3,\n.tp-preview h4,\n.tp-preview h5,\n.tp-preview h6 {\n  margin-top: calc(var(--tp-spacing) * 2);\n  margin-bottom: var(--tp-spacing);\n  font-weight: 600;\n  line-height: 1.25;\n}\n\n.tp-preview h1 { font-size: 2em; border-bottom: 1px solid var(--tp-color-border); padding-bottom: 0.3em; }\n.tp-preview h2 { font-size: 1.5em; border-bottom: 1px solid var(--tp-color-border); padding-bottom: 0.3em; }\n.tp-preview h3 { font-size: 1.25em; }\n.tp-preview h4 { font-size: 1em; }\n.tp-preview h5 { font-size: 0.875em; }\n.tp-preview h6 { font-size: 0.85em; color: var(--tp-color-muted); }\n\n.tp-preview p {\n  margin-top: 0;\n  margin-bottom: calc(var(--tp-spacing) * 2);\n}\n\n.tp-preview code {\n  font-family: var(--tp-font-mono);\n  font-size: 85%;\n  background: var(--tp-color-border);\n  padding: 0.2em 0.4em;\n  border-radius: 3px;\n}\n\n.tp-preview pre {\n  font-family: var(--tp-font-mono);\n  font-size: 85%;\n  background: var(--tp-color-border);\n  padding: calc(var(--tp-spacing) * 2);\n  border-radius: 6px;\n  overflow: auto;\n  line-height: 1.45;\n}\n\n.tp-preview pre code {\n  background: transparent;\n  padding: 0;\n  border-radius: 0;\n}\n\n/* Error display */\n.tp-error {\n  color: var(--tp-color-error);\n  font-family: var(--tp-font-mono);\n  font-size: 12px;\n  padding: var(--tp-spacing);\n  background: rgba(248, 81, 73, 0.1);\n  border: 1px solid var(--tp-color-error);\n  border-radius: 4px;\n  margin: var(--tp-spacing) 0;\n}\n\n/* Responsive layout */\n@media (max-width: 1200px) {\n  .tp-widget-container {\n    grid-template-columns: 1fr;\n  }\n\n  .tp-pane {\n    max-height: 400px;\n  }\n}\n\n@media (min-width: 1201px) and (max-width: 1600px) {\n  .tp-widget-container {\n    grid-template-columns: 1fr 1fr;\n  }\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "VERSION", "initRuntime", "initWidget", "injectStyles", "renderChunks", "chunks", "html", "chunk", "escaped", "escapeHtml", "imgData", "src", "text", "div", "initWidget", "container", "scriptTag", "data", "widgetHtml", "mountPoint", "error", "styles_default", "VERSION", "injectStyles", "styleId", "styleElement", "styles_default", "initRuntime", "initWidget", "autoInit", "container", "mutations", "mutation", "node", "widget"]
}
